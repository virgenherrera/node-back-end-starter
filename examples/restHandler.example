import { Router }			from "express";
import { iRestHandler }		from "../../Sys/interfaces";
import HandlerUtility		from '../../Sys/HandlerUtility';
import {{Module}}Controller		from '../../controller/{{Module}}';
// only for debugging
// import Debug from '../../Sys/Debug';

/* {{module}} Handler Class */
class {{module}}Handler extends HandlerUtility implements iRestHandler{

	/**
	* Mandatory Properties Description
	* name:		this Handler's Name
	* path:		the path that this handlerClass will manage
	* router:	the ExpressRouter itself to fill
	*/
	name:string		= '{{module}}';
	path:string		= `/api/v1/${this.name}s`;
	router:Router	= Router();

	constructor(){
		// execute parent constructor
		super();

		// Attach handlers to express Router
		this.router
		.get("/", this.getAllHandler.bind( this ) )
		// .get("/:id", this.getOneHandler.bind( this ) )
		.post( "/", this.postHandler.bind( this ) )
		// .put("/:id", this.putHandler.bind( this ) )
		// .delete("/:id", this.deleteHandler.bind( this ) )
		;
	}

	get controller(){
		return new {{Module}}Controller;
	}

	getAllHandler(...args:any[]):any{
		this.middlewareParams = args;
		let params:any = this.getRequestParams('query');

		return this.controller
		.listAction( params )
		.then( this.SuccessJsonResponse.bind( this ) )
		.catch( this.ErrorJsonResponse.bind( this ) );
	}

	getOneHandler(...args:any[]):any{
		// this.middlewareParams = args;
		// let params:any = this.getRequestParams('params');

		// return this.controller
		// .showAction( params )
		// .then( this.SuccessJsonResponse.bind( this ) )
		// .catch( this.ErrorJsonResponse.bind( this ) );
	}

	postHandler(...args:any[]):any{
		this.middlewareParams = args;
		let params:any = this.getRequestParams('body');

		return this.controller
		.createAction( params )
		.then( this.SuccessJsonResponse.bind( this ) )
		.catch( this.ErrorJsonResponse.bind( this ) );
	}

	putHandler(...args:any[]):any{
		// this.middlewareParams = args;
		// let params:any = this.getRequestParams('params,body');

		// return this.controller
		// .editAction( params )
		// .then( this.SuccessJsonResponse.bind( this ) )
		// .catch( this.ErrorJsonResponse.bind( this ) );
	}

	deleteHandler(...args:any[]):any{
		// this.middlewareParams = args;
		// let params:any = this.getRequestParams('params');

		// return this.controller
		// .deleteAction( params )
		// .then( this.SuccessJsonResponse.bind( this ) )
		// .catch( this.ErrorJsonResponse.bind( this ) );
	}
}

export default new {{module}}Handler;
