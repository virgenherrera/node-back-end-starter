import { {{Module}}Model } from '../Model/{{module}}';
import { IfullRepository } from '../Sys/interfaces';
// only for debugging
// import { dd } from '../Sys/Debug';

export default class {{Module}}Repository implements IfullRepository {
	async GetById({ id = null }): Promise<any> {
		return await {{Module}}Model.findById(id).exec();
	}

	async findOne(params, fields = null): Promise<any> {
		return await {{Module}}Model.findOne(params, fields).exec();
	}

	async GetOne({ id = null }): Promise<any> {
		return await {{Module}}Model.findById(id).exec();
	}

	async GetAll({limit, offset, sort = {} }): Promise<any> {
		// Important to return Total count
		// do not forget to include!!!!
		const count	= await {{Module}}Model.count({}).exec();
		const rows	= await {{Module}}Model
		.find()
		.skip( offset )
		.limit( limit )
		.sort( sort )
		.exec();

		return {count, rows};
	}

	async Create(params): Promise<any> {
		const preparedEntity = new {{Module}}Model(params);
		const storedEntity = await preparedEntity.save();

		// to avoid bubble private chars
		return await {{Module}}Model.findById(storedEntity).exec();
	}

	async Update(params): Promise<any> {
		const {
			id = null,
{{letDeclarations}}} = params;
		const Entity = await {{Module}}Model.findById(id).exec();

		if (!Entity) { return `non-existent Entity with id: ${id}`; }

{{valAssignations}}
		return await Entity.save();
	}

	async Delete({id}): Promise<any> {
		return await {{Module}}Model.remove({ _id: id }).exec();
	}
}
