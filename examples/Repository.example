import {{{Module}}Model} from "../Model/{{module}}";
import {iRepository} from "../Sys/interfaces";
// only for debugging
// import Debug from "../Sys/Debug";

export default class {{Module}}Repository implements iRepository{
	async GetOne({ id = null }):Promise<any>{
		return await {{Module}}Model.findById(id).exec();
	}

	async GetAll({limit,offset,sort={}}): Promise<any> {
		// Important to return Total count
		// do not forget to include!!!!
		let count	= await {{Module}}Model.count({}).exec();
		let rows	= await {{Module}}Model
		.find()
		.skip( offset )
		.limit( limit )
		.sort( sort )
		.exec();

		return {count,rows};
	}

	async Create(params):Promise<any>{
		let preparedEntity	= new {{Module}}Model(params);
		let storedEntity	= await preparedEntity.save();

		// to avoid bubble private chars
		return await {{Module}}Model.findById(storedEntity).exec();
	}

	async Update(params):Promise<any>{
		let {
			id = null,
{{letDeclarations}}} = params;
		let Entity = await {{Module}}Model.findById(id).exec();

		if(!Entity) return `non-existent Entity with id: ${id}`;

{{valAssignations}}
		return await Entity.save();
	}

	async Delete({id}):Promise<any>{
		return await {{Module}}Model.remove({ _id: id }).exec();
	}
}
